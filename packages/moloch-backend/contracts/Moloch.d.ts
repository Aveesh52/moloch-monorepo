/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from "web3/eth/contract";
import { TransactionObject, BlockType } from "web3/eth/types";
import { Callback, EventLog } from "web3/types";
import { EventEmitter } from "events";
import { Provider } from "web3/providers";

export class Moloch {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions);
  _address: string;
  options: contractOptions;
  methods: {
    members(
      arg0: string
    ): TransactionObject<{
      delegateKey: string;
      shares: string;
      isActive: boolean;
      highestIndexYesVote: string;
      0: string;
      1: string;
      2: boolean;
      3: string;
    }>;

    proposalQueue(
      arg0: number | string
    ): TransactionObject<{
      proposer: string;
      applicant: string;
      sharesRequested: string;
      startingPeriod: string;
      yesVotes: string;
      noVotes: string;
      processed: boolean;
      didPass: boolean;
      aborted: boolean;
      tokenTribute: string;
      details: string;
      maxTotalSharesAtYesVote: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: boolean;
      7: boolean;
      8: boolean;
      9: string;
      10: string;
      11: string;
    }>;

    memberAddressByDelegateKey(arg0: string): TransactionObject<string>;

    canRagequit(
      highestIndexYesVote: number | string
    ): TransactionObject<boolean>;

    hasVotingPeriodExpired(
      startingPeriod: number | string
    ): TransactionObject<boolean>;

    getMemberProposalVote(
      memberAddress: string,
      proposalIndex: number | string
    ): TransactionObject<string>;

    submitProposal(
      applicant: string,
      tokenTribute: number | string,
      sharesRequested: number | string,
      details: string
    ): TransactionObject<void>;

    submitVote(
      proposalIndex: number | string,
      uintVote: number | string
    ): TransactionObject<void>;

    processProposal(proposalIndex: number | string): TransactionObject<void>;

    ragequit(sharesToBurn: number | string): TransactionObject<void>;

    abort(proposalIndex: number | string): TransactionObject<void>;

    updateDelegateKey(newDelegateKey: string): TransactionObject<void>;

    processingReward(): TransactionObject<string>;
    totalSharesRequested(): TransactionObject<string>;
    totalShares(): TransactionObject<string>;
    gracePeriodLength(): TransactionObject<string>;
    abortWindow(): TransactionObject<string>;
    summoningTime(): TransactionObject<string>;
    votingPeriodLength(): TransactionObject<string>;
    proposalDeposit(): TransactionObject<string>;
    guildBank(): TransactionObject<string>;
    dilutionBound(): TransactionObject<string>;
    periodDuration(): TransactionObject<string>;
    approvedToken(): TransactionObject<string>;
    getCurrentPeriod(): TransactionObject<string>;
  };
  deploy(options: {
    data: string;
    arguments: any[];
  }): TransactionObject<Contract>;
  events: {
    SubmitProposal(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    SubmitVote(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ProcessProposal(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Ragequit(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Abort(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    UpdateDelegateKey(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
  getPastEvents(
    event: string,
    options?: {
      filter?: object;
      fromBlock?: BlockType;
      toBlock?: BlockType;
      topics?: (null | string)[];
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>;
  setProvider(provider: Provider): void;
  clone(): Moloch;
}
